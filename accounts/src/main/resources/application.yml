server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
#  Config server lesson
  config:
    import: "optional:configserver:http://localhost:8071/"
#  Resilience lesson & Eureka server lesson
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
#    Chapter 13- RabbitMQ message broker
    function:
      definition: updateCommunication
    stream:
      bindings:
        sendCommunication-out-0:
          destination: send-communication
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
#    Chapter 14 - Kafka
      kafka:
        binder:
          brokers:
            - localhost:9092

#    Chapter 13- RabbitMQ message broker
#  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#    connection-timeout: 10s


# Actuator endpoints & config server lesson
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
#      Observability & Monitoring
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true
# eureka service registering
eureka:
  instance:
    prefer-ip-address: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/
# eureka server more info
info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"
# To view logs
logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG
# Observability & Monitoring part's Distributed tracing using opentelementry
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 100
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1